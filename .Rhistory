library(ggplot2)
library(tidyverse)
library(dplyr)
library(stringi)
read.pcibex <- function(filepath, auto.colnames=TRUE, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
if (auto.colnames){
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
else{
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
}
df <- read.pcibex("lab1_results_w2025_and_f2025.csv")
df_subj1 <- df %>% filter(df$Controller.name == 'Form')
df_data1 <- df %>% filter(df$Controller.name == 'AcceptabilityJudgment')
df_subj2 <- df_subj1 %>%
select(
subj1 = MD5.hash.of.participant.s.IP.address,
subj2 = Results.reception.time,
question = Question..NULL.if.none..,
response = Answer
)
df_subj3 <- df_subj2 %>%
pivot_wider(
names_from = question,
values_from = response,
id_cols = c(subj1, subj2)
)
set.seed(123)
df_subj4 <- df_subj3 %>%
select(
subj1, subj2, student_name, state, gender, age,
natlang, parentlang, domlang, otherlang, lab1
) %>%
as.data.frame() %>%
# mutate(student_name = as.character(student_name)) %>%
mutate(student_name = sub("^\\s", "", student_name)) %>%
mutate(student_name = sub("%0A$", "", student_name))
df_data2 <- df_data1 %>%
select(
subj1 = MD5.hash.of.participant.s.IP.address,
subj2 = Results.reception.time,
label = Label,
response = Answer,
RT = Time.taken.to.answer.
) %>%
filter(!is.na(RT)) %>%
mutate(set = substr(label, 1, 1),
vot = as.numeric(substr(label, 2, nchar(label)))) %>%
select(-c(label)) %>%
mutate(response = gsub("^F: |^J: ", "", response))
df_combined <- merge(df_subj4, df_data2, by = c("subj1", "subj2"))
df_combined <- df_combined %>%
group_by(subj1, subj2) %>%
mutate(subj = paste0(stri_rand_strings(1, 24, "[a-z0-9]"))) %>%
select(subj, everything())
# df_combined <- subset(df_combined, select=-c(subj1, subj2))
df_combined_w2025 <- df_combined %>%
subset(subj2 >= 1736000000 & subj2 < 1737000000)
df_combined_f2025 <- df_combined %>%
subset(subj2 >= 1760000000)
sorted(unique(df_combined$subj2))
sort(unique(df_combined$subj2))
df_combined_w2025 <- df_combined %>%
subset(subj2 >= 1736000000 & subj2 < 1737000000)
df_combined_f2025 <- df_combined %>%
subset(subj2 >= 1759000000)
# df_combined_w2025[] <- lapply(df_combined_w2025,
df_combined_f2025[] <- lapply(df_combined_f2025,
function(x) if (is.list(x)) sapply(x, toString) else x)
write.csv(df_combined_f2025, "lab1_results_cleaned.csv", row.names = FALSE)
df_now <- df_combined_f2025
sort(unique(df_now$student_name))
length(sort(unique(df_now$student_name))) # 44
View(df_combined)
# df_combined_w2025[] <- lapply(df_combined_w2025,
df_combined_f2025[] <- lapply(df_combined_f2025,
function(x) if (is.list(x)) sapply(x, toString) else x)
write.csv(df_combined_f2025, "lab1_results_cleaned.csv", row.names = FALSE)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(stringi)
read.pcibex <- function(filepath, auto.colnames=TRUE, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
if (auto.colnames){
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
else{
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
}
df <- read.pcibex("lab1_results_w2025_and_f2025.csv")
df_subj1 <- df %>% filter(df$Controller.name == 'Form')
df_data1 <- df %>% filter(df$Controller.name == 'AcceptabilityJudgment')
df_subj2 <- df_subj1 %>%
select(
subj1 = MD5.hash.of.participant.s.IP.address,
subj2 = Results.reception.time,
question = Question..NULL.if.none..,
response = Answer
)
df_subj3 <- df_subj2 %>%
pivot_wider(
names_from = question,
values_from = response,
id_cols = c(subj1, subj2)
)
set.seed(123)
df_subj4 <- df_subj3 %>%
select(
subj1, subj2, student_name, state, gender, age,
natlang, parentlang, domlang, otherlang, lab1
) %>%
as.data.frame() %>%
# mutate(student_name = as.character(student_name)) %>%
mutate(student_name = sub("^\\s", "", student_name)) %>%
mutate(student_name = sub("%0A$", "", student_name))
df_data2 <- df_data1 %>%
select(
subj1 = MD5.hash.of.participant.s.IP.address,
subj2 = Results.reception.time,
label = Label,
response = Answer,
RT = Time.taken.to.answer.
) %>%
filter(!is.na(RT)) %>%
mutate(set = substr(label, 1, 1),
vot = as.numeric(substr(label, 2, nchar(label)))) %>%
select(-c(label)) %>%
mutate(response = gsub("^F: |^J: ", "", response))
df_combined <- merge(df_subj4, df_data2, by = c("subj1", "subj2"))
df_combined <- df_combined %>%
group_by(subj1, subj2) %>%
mutate(subj = paste0(stri_rand_strings(1, 24, "[a-z0-9]"))) %>%
select(subj, everything())
# df_combined <- subset(df_combined, select=-c(subj1, subj2))
df_combined_w2025 <- df_combined %>%
subset(subj2 >= 1736000000 & subj2 < 1737000000)
df_combined_f2025 <- df_combined %>%
subset(subj2 >= 1759000000)
# df_combined_w2025[] <- lapply(df_combined_w2025,
df_combined_f2025[] <- lapply(df_combined_f2025,
function(x) if (is.list(x)) sapply(x, toString) else x)
write.csv(df_combined_f2025, "lab1_results_cleaned.csv", row.names = FALSE)
df_now <- df_combined_f2025
sort(unique(df_now$student_name))
length(sort(unique(df_now$student_name))) # 67
df_now <- df_now %>%
filter(RT >= mean(RT, na.rm = TRUE) - 3 * sd(RT, na.rm = TRUE) &
RT <= mean(RT, na.rm = TRUE) + 3 * sd(RT, na.rm = TRUE))
summary <- df_now %>%
group_by(vot) %>%
summarize(
response_ratio = mean(response == "bear", na.rm = TRUE),
response_se = sd(response == "bear", na.rm = TRUE) / sqrt(n()),  # Standard error
response_ci_lower = response_ratio - 1.96 * response_se,  # Lower bound of 95% CI
response_ci_upper = response_ratio + 1.96 * response_se   # Upper bound of 95% CI
)
p_response <-
ggplot(summary, aes(x = as.factor(vot), y = response_ratio)) +
geom_point(color = "black", size = 3) +
geom_line(group = 1, color = "orange") +
geom_errorbar(
aes(ymin = response_ci_lower, ymax = pmin(response_ci_upper, 1)),
width = 0.1, color = "black"
) +
scale_x_discrete(breaks = 1:9) +
scale_y_continuous(breaks = seq(0, 1, by = 0.25)) +
labs(
x = "Step-wise VOT (bear -- pear)",
y = "Selection Ratio (Choosing 'bear')",
title = "/b/-/p/ Perception Response Ratio (N = 67)"
) +
theme_minimal()
formats <- c("pdf", "svg")
lapply(formats, function(ext) {
ggsave(
plot = p_response,
width = 6,
height = 4,
dpi = 300,
filename = paste0("lab1_selection_ratio_bear.", ext)
)
})
df_now <- df_combined %>%
filter(RT >= mean(RT, na.rm = TRUE) - 3 * sd(RT, na.rm = TRUE) &
RT <= mean(RT, na.rm = TRUE) + 3 * sd(RT, na.rm = TRUE))
summary <- df_now %>%
group_by(vot) %>%
summarize(
bear_response_ratio = mean(response == "bear", na.rm = TRUE),
pear_response_ratio = mean(response == "pear", na.rm = TRUE),
bear_response_se = sd(response == "bear", na.rm = TRUE) / sqrt(n()),
pear_response_se = sd(response == "pear", na.rm = TRUE) / sqrt(n()),
bear_response_ci_lower = bear_response_ratio - 1.96 * bear_response_se,
bear_response_ci_upper = bear_response_ratio + 1.96 * bear_response_se,
pear_response_ci_lower = pear_response_ratio - 1.96 * pear_response_se,
pear_response_ci_upper = pear_response_ratio + 1.96 * pear_response_se
)
p_response_both <- ggplot() +
# Plot for 'bear' response ratio with triangle shape (shape = 17)
geom_point(data = summary, aes(x = as.factor(vot), y = bear_response_ratio,
color = "bear"),
shape = 17, size = 3) +
geom_line(data = summary, aes(x = as.factor(vot), y = bear_response_ratio,
color = "bear", group = 1)) +
geom_errorbar(data = summary, aes(x = as.factor(vot),
ymin = bear_response_ci_lower,
ymax = pmin(bear_response_ci_upper, 1),
color = "bear"), width = 0.1) +
# Plot for 'pear' response ratio with circular shape (shape = 16)
geom_point(data = summary, aes(x = as.factor(vot), y = pear_response_ratio,
color = "pear"),
shape = 16, size = 3) +
geom_line(data = summary, aes(x = as.factor(vot), y = pear_response_ratio,
color = "pear", group = 1)) +
geom_errorbar(data = summary, aes(x = as.factor(vot),
ymin = pear_response_ci_lower,
ymax = pmin(pear_response_ci_upper, 1),
color = "pear"), width = 0.1) +
scale_x_discrete(breaks = 1:9) +  # Treat x-axis as discrete with breaks 1 through 9
scale_y_continuous(breaks = seq(0, 1, by = 0.25)) +
scale_color_manual(values = c("bear" = "black", "pear" = "orange")) +
labs(
x = "Step-wise VOT (bear -- pear)",
y = "Selection Ratio",
title = "/b/-/p/ Perception Response Ratio (N = 67)",
color = "Response Type"
) +
theme_minimal() +
theme(legend.position = "bottom")
formats <- c("pdf", "svg")
lapply(formats, function(ext) {
ggsave(
plot = p_response_both,
width = 6,
height = 4,
dpi = 300,
filename = paste0("lab1_selection_ratio.", ext)
)
})
df_now <- df_combined %>%
filter(RT >= mean(RT, na.rm = TRUE) - 3 * sd(RT, na.rm = TRUE) &
RT <= mean(RT, na.rm = TRUE) + 3 * sd(RT, na.rm = TRUE))
summary_time <- df_now %>%
group_by(vot) %>%
summarize(
response_rt = mean(RT, na.rm = TRUE),  # Calculate mean RT
response_se = sd(RT, na.rm = TRUE) / sqrt(n()),  # Calculate standard error
response_ci_lower = response_rt - 1.96 * response_se,  # Lower bound of 95% CI
response_ci_upper = response_rt + 1.96 * response_se   # Upper bound of 95% CI
)
p_time <-
ggplot(summary_time, aes(x = as.factor(vot), y = response_rt)) +
geom_point(color = "black", size = 3) +
geom_line(group = 1, color = "orange") +
geom_errorbar(
aes(ymin = response_ci_lower, ymax = response_ci_upper),
width = 0.1, color = "black"
) +
scale_x_discrete(breaks = 1:9) +
labs(
x = "Step-wise VOT (bear -- pear)",
y = "Response Time (ms)",
title = "/b/-/p/ Categorical Perception Response Time (N = 67)"
) +
theme_minimal()
formats <- c("pdf", "svg")
lapply(formats, function(ext) {
ggsave(
plot = p_time,
width = 6,
height = 4,
dpi = 300,
filename = paste0("lab1_response_time.", ext)
)
})
